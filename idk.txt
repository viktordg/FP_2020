1. Опашка
Опашката е вид абсрактна стуктура от данни. Тя е линейна. Опашката е крайно линейно множество от елементи, при което елементите
се добавят само най-отзад и се извличат само най-отпред.
first-in-first-out
2. depth-first search
За осъществяване на алгоритма се взема коре и обхождането стартира от него. Последователно се посещават всички върхове до достигане
но връх без наследници, след което се осъществява backtracking  до достигане на нова крайна точка или при цялостно реализирано обхождане
- към корена.
3. Алгебричен тип
date <тип> [<параметри>] = <дефиниция>
<тип> - започна с главна буква
[<параметри>] - списък от различни типове елементи
<дефиниция> - описва различните варианти за елеметите на класа

data Bool = True | False
data Shape = Circle{radius::Double}
		|Rect{width::Double, height::Double}
5. Полиморфна функция
Една полиморфна функция има единствена дефиниция, която работи за всичкинейни типове
6. Класове
class <клас> <типова променлива> where
{<метод>{,<метод>} :: <тип>}
{<метод>=<реализация по подразбиране>}

class Eq a where
(==), (/=) :: a->a->Bool
x/=y = not(x==y)
x==y = not(x/=y)

class Measurable a where
size::a->Int
empty::a->Bool
empty x = size x == 0
7.lazy evaluation
Същтността на стратегията е, че интерпретаторът оценява даден аргумен на дадеда функция само ако стойността му е необходима за
пресмятане на целия резултат.
Ако даден аргумент е съставен, то се оценяват само необходимите негови аргументи за получаване на резултат
При 2 дублиращи се подизраза се оценява по не повече от 1 път

f x y
f x y = x + y
f (10-5) (f15 10)
(10-5) f15 10
5 + (15+10)
5 + 25
30

h:: Int->Int->Int
h x y = x + x
h (10-5) (h 10 5)
(10-5) (10-5)
5 + 5
10








